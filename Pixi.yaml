openapi: 3.0.0
info:
  description: Pixi Photo Sharing API
  version: 1.0.0
  title: Pixi App API
#Contato da desenvolvedora, API originalmente extraÃ­da do PIXI
  contact:
    email: nicole.becher@owasp.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: admins
    description: Secured Admin-only calls
  - name: users
    description: 'Operations available to regular, logged in users'
  - name: anyone
    description: Operations available to anyone

paths:
  /api/pictures:
    get:
      operationId: getAllPictures
      tags:
        - users
      summary: gets all pixi photos
      parameters:
        - name: token
          in: query
          description: JWT token
          required: true
          schema:
            type: string
        - in: header
          name: x-access-token
          description: Users JWT token
          required: true
          schema:
            type: string
      description: |
        This will return the entirety of photos available in Pixi
      responses:
        '200':
          description: json all pixi photos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PicturesItem'
          links:
            userUploadedPictures:
              operationId: useruploadedpictures
              parameters:
                picture_id: $response.body#/_id
        '400':
          description: bad input parameter
  /api/picture/{picture_id}:
    get:
      tags:
        - users
      summary: get information about a specific photo
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT token
          required: true
          schema:
            type: string
        - in: query
          name: token
          description: JWT token
          required: true
          schema:
            type: string
        - in: path
          name: picture_id
          description: ID of picture
          required: true
          schema:
            type: integer
      operationId: useruploadedpictures
      description: user can get all photos they uploaded
      responses:
        '200':
          description: successful authentication user photo json object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PicturesItem'
        '403':
          description: invalid or missing token
  /api/picture/delete:
    delete:
      operationId: deletePicture
      tags:
        - users
      summary: delete a specified picture
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
        - in: query
          name: picture_id
          description: '?picture_id=xxx'
          schema:
            type: number
      description: user can delete a photo
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token
  /api/picture/delete/{picture_id}:
    get:
      operationId: deletePictureHeader
      tags:
        - users
      summary: delete a specified picture
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
        - in: query
          name: picture
          description: ID of picture to be deleted
          schema:
            type: number
        - in: path
          name: picture_id
          required: true
          description: ID of picture to be deleted
          schema:
            type: number
      description: user can delete a photo
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token
  /api/picture/{picture_id}/likes:
    get:
      tags:
        - users
      summary: get a list of loves by user
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
        - in: path
          name: picture_id
          required: true
          description: in URL string
          schema:
            type: number
            minimum: 1
      operationId: userloves
      description: user can get a list of all their loves
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token
  /api/picture/{picture_id}/loves:
    get:
      tags:
        - users
      summary: get a list of loves by user
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
        - in: path
          name: picture_id
          required: true
          description: in URL string
          schema:
            type: number
      description: user can get a list of all their loves
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token
  /api/pictures/love:
    get:
      operationId: sendLove
      tags:
        - users
      summary: send a love to a picture
      description: love a picture initiates a .05 micropayment to creator.
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
        - in: query
          name: picture_id
          description: '?picture_id=xxx'
          schema:
            type: number
      responses:
        '200':
          description: successful authentication user photo json object
        '202':
          description: missing picture_id parameter
        '403':
          description: invalid or missing token
  /api/pictures/like:
    get:
      tags:
        - users
      summary: send a like to a picture
      description: >-
        you can only like a picture once if you like it again you will unlike
        it.
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
        - in: query
          name: picture_id
          description: '?picture_id=xxx'
          schema:
            type: number
      responses:
        '200':
          description: successful authentication user photo json object
        '202':
          description: missing picture_id parameter
        '403':
          description: invalid or missing token
  /api/picture/upload:
    post:
      tags:
        - users
      summary: delete a specified picture
      description: user can get all photos they uploaded
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PicturesItem'
        description: pictures object
        required: true
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token
  /api/login:
    post:
      tags:
        - anyone
      summary: login successfully and receive json web token.
      requestBody:
        $ref: '#/components/requestBodies/UsersItem'
      operationId: authenticate
      description: user supplies user name and password and receives a json web token
      responses:
        '200':
          description: 'successfully logged in, get JWT'
          links:
            userInfo:
              operationId: userinfo
              parameters:
                x-access-token: $response.body#/token
        '202':
          description: 'successfully request, but invalid password'
        '422':
          description: missing parameters
  /api/register:
    post:
      tags:
        - anyone
      summary: register for an account and receive token
      operationId: register
      description: >-
        user supplies email and password to register and receives a json web
        token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersItem'
        required: true
      responses:
        '200':
          description: 'successfully registered, token received'
        '202':
          description: email address already registered
  /api/search:
    get:
      tags:
        - users
      summary: search pixi photos
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT token
          required: true
          schema:
            type: string
      description: |
        This will search entirety of photos available in Pixi
      responses:
        '200':
          description: pictures that match search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PicturesItem'
        '202':
          description: missing search parameter
  /api/user/info:
    get:
      tags:
        - users
      summary: get user information
      operationId: userinfo
      description: user supplies valid token and receives all user info
      parameters:
        - in: header
          name: x-access-token
          description: Users JWT Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful authentication sent user information
        '403':
          description: invalid or missing token
  /api/user/edit_info:
    put:
      tags:
        - users
      summary: edit user information
      operationId: edituserinfo
      description: user supplies valid token and receives all user info
      requestBody:
        $ref: '#/components/requestBodies/UsersItem'
      responses:
        '200':
          description: successful authentication sent user information
        '403':
          description: invalid or missing token
  /api/user/pictures:
    get:
      operationId: getUserPictures
      tags:
        - users
      summary: get all photos uploaded by user
      description: user can get all photos they uploaded
      parameters:
        - in: header
          name: x-access-token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful authentication user photo json object
          links:
            deletepicture:
              operationId: deletePicture
              parameters:
                picture_id: $response.body#/_id
            userUploadedPictures:
              operationId: useruploadedpictures
              parameters:
                picture_id: $response.body#/_id
        '403':
          description: invalid or missing token
  /api/user/likes:
    get:
      tags:
        - users
      summary: get a list of likes by user
      operationId: userlikes
      description: user can get a list of all their likes
      parameters:
        - in: header
          name: x-access-token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful authentication user photo json object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LikesItem'
        '403':
          description: invalid or missing token
  /api/user/loves:
    get:
      tags:
        - users
      summary: get a list of loves by user
      description: user can get a list of all their loves
      parameters:
        - in: header
          name: x-access-token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful authentication user photo json object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LovesItem'
        '403':
          description: invalid or missing token
  /api/admin/users/search:
    get:
      tags:
        - admins
      summary: get a list of loves by user
      description: user can get a list of all their loves
      parameters:
        - in: header
          name: x-access-token
          required: true
          schema:
            type: string
        - in: query
          name: search
          description: search query ?search=xxx
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful authentication user photo json object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsersItem'
        '403':
          description: invalid or missing token
  /api/admin/loves/search:
    get:
      tags:
        - admins
      summary: get a list of all loves by user
      description: user can get a list of all their loves
      parameters:
        - in: header
          name: x-access-token
          required: true
          schema:
            type: string
        - in: query
          name: search
          description: search query ?search=xxx
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token
  /api/admin/likes/search:
    get:
      tags:
        - admins
      summary: more money for users
      description: user can get a list of all their loves
      parameters:
        - in: header
          name: x-access-token
          required: true
          schema:
            type: string
        - in: query
          name: search
          description: search query ?search=xxx
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token
  /api/admin/money:
    post:
      tags:
        - admins
      summary: bonanza
      description: user can get a list of all their loves
      parameters:
        - in: header
          name: x-access-token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UsersItem'
      responses:
        '200':
          description: successful authentication user photo json object
        '403':
          description: invalid or missing token

servers:
  - url: 'http://104.131.115.192:8090/'

components:
  requestBodies:
    UsersItem:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersItem'
      description: userobject
      required: true
  schemas:
    UsersItem:
      type: object
      required:
        - user
        - pass
      properties:
        id:
          type: number
          format: number
          example: 1
        user:
          type: string
          format: email
          example: email@email.com
        pass:
          type: string
          format: string
          example: p@ssword1
        name:
          type: string
          example: Johnny Appleseed
        is_admin:
          description: is admin
          type: boolean
        account_balance:
          description: remaning balance
          type: number
    PicturesItem:
      type: object
      required:
        - filename
      properties:
        filename:
          type: object
          format: jpg
          example: file.jpg
        name:
          type: string
          example: Johnny Appleseed
        email:
          type: string
          format: email
          example: email
        creator_id:
          $ref: '#/components/schemas/UsersItem'
    LikesItem:
      type: object
      required:
        - user_id
        - picture_id
      properties:
        user_id:
          $ref: '#/components/schemas/UsersItem'
        picture_id:
          $ref: '#/components/schemas/PicturesItem'
    LovesItem:
      type: object
      required:
        - user_id
        - picture_id
      properties:
        user_id:
          $ref: '#/components/schemas/UsersItem'
        picture_id:
          $ref: '#/components/schemas/PicturesItem'